version: 2.1

orbs: 
  aws-eks: circleci/aws-eks@2.2.0
  aws-ecr: circleci/aws-ecr@3.1.0
  kubernetes: circleci/kubernetes@1.3


jobs:
  run-linting:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install hadolint
          command: |
             sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-x86_64
             sudo chmod +x /bin/hadolint
      - run:
          name: lint dockerfile
          command: |
            hadolint Dockerfile
      - run:
          name: install deps
          command: | 
            cd songapp
            npm install
      - run:
          name: lint app.js
          command: |
            cd songapp
            npx eslint --env node app.js


  build-dockerimage:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build image and push to docker hub
          command: |
            export TAG=${CIRCLE_SHA1}
            export IMAGE=songapp
            docker build -t andyhabel/$IMAGE:$TAG .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD 
            docker push andyhabel/$IMAGE:$TAG


#Utilizes ORB plays adapted from https://circleci.com/developer/orbs/orb/circleci/aws-eks 
  test-cluster:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test cluster
          command: |
            kubectl get pods
            kubectl get services
            sleep 180
            EXTERNAL_IP=$(kubectl get service app | awk '{print $4}' | tail -n1) 
            curl -s --retry 10 "http://$EXTERNAL_IP"

#Utilizes ORB plays adapted from https://circleci.com/developer/orbs/orb/circleci/aws-eks 
  deploy-application:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      docker-image-name:
        description: |
          Name of the docker image to be deployed
        type: string
      aws-region:
        description: |
          AWS region
        type: string
    steps:
      - checkout
      - run:
          name: create and view deployment manifest
          command: |
            cat deployment/songapp-deployment.yaml.template | sed "s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|g" > deployment/deployment.yaml 
            cat deployment/deployment.yaml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/deployment.yaml"
          get-rollout-status: true
          resource-name: deployment/app
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/service.yaml"

        
workflows:
  default:
    jobs:
      - run-linting
      - build-dockerimage:
          requires:
            - "run-linting"
      - aws-ecr/build_and_push_image:
          name: build-and-push-image
          account-url: AWS_ECR_URL
          region: AWS_DEFAULT_REGION
          repo: songapp
          dockerfile: ~/project/Dockerfile
          path: ~/project/
          tag: ${CIRCLE_SHA1}
      - aws-eks/create-cluster:
          cluster-name: capstonecluster-${CIRCLE_WORKFLOW_ID:0:7}
          requires:
            - build-and-push-image            
      - deploy-application:
          cluster-name: capstonecluster-${CIRCLE_WORKFLOW_ID:0:7}
          aws-region: $AWS_DEFAULT_REGION
          docker-image-name: "${AWS_ECR_URL}/songapp:${CIRCLE_SHA1}"
          requires:
            - aws-eks/create-cluster          
      - test-cluster:
          cluster-name: capstonecluster-${CIRCLE_WORKFLOW_ID:0:7}
          requires:
            - deploy-application
      - aws-eks/delete-cluster:
          cluster-name: capstonecluster-${CIRCLE_WORKFLOW_ID:0:7}
          requires: 
            - test-cluster
